

/*
 public enum MapContentsType
    {
        Content,
        Unset,
        OutOfBounds,
    }
    
    
    

using System;
using System.Collections.Generic;
using System.Data.Common;
using System.IO;
using System.Text;

public class Advent_Of_Code
{
    public readonly Dictionary<String, Object> _tileDefinitions = new Dictionary<String, Object>();

    public void AttachParam(Dictionary<string, string> parameters)
    {
        try
        {
            if (parameters.Count > 0)
            {
                foreach (KeyValuePair<string, string> kvp in parameters)
                {
                    Console.WriteLine(kvp.Key, kvp.Value);
                }
            }
        }
        catch (Exception ex)
        {
            throw;
        }
    }

    public static void Main()
    {
        //Create a FileInfo instance representing an existing text file.
        FileInfo MyFile = new FileInfo(@"day08_example.txt");
        //Instantiate a StreamReader to read from the text file.
        StreamReader reader = MyFile.OpenText();
        // Read the stream as a string.
        string puzzle_input = reader.ReadToEnd();
        Console.WriteLine(puzzle_input);
        Dictionary<string, string> d = new Dictionary<string, string>();

        using (reader)
        {
            string line = "";

            // while it reads a key
            while ((line = reader.ReadLine()) != null)
            {
                // add the key and whatever it

                // can read next as the value
                d.Add(line, reader.ReadLine());
            }
        }
        foreach (KeyValuePair<string, string> kvp in d)
        {
            Console.WriteLine("line: ", kvp);
            Console.WriteLine("kvp[keys]:", kvp.Key, kvp.Value);
        }
    }
}

*/


using System;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;

public class Advent_Of_Code
{
    public enum MapContentsType
    {
        Content,
        Unset,
        OutOfBounds,
    }

    static void Main(string[] args)
    {
        int[][] jaggedArray = new int[6][];

        Console.WriteLine("Hello, World!");
        // Declare the array of two elements.
        int[][] arr = new int[2][];

        // Initialize the elements.
        arr[0] = [1, 3, 5, 7, 9];
        arr[1] = [2, 4, 6, 8];

        // Display the array elements.
        for (int i = 0; i < arr.Length; i++)
        {
            System.Console.Write("MapLine({0}): ", i);

            for (int j = 0; j < arr[i].Length; j++)
            {
                System.Console.Write("{0}{1}", arr[i][j], j == (arr[i].Length - 1) ? "" : " ");
            }
            System.Console.WriteLine();
        }
        Console.WriteLine(GetMapSize())

    public jaggeArray GenerateMap()
    {
        Console.WriteLine("creating a Map Object");
    }

    public Array GetMapSize(string fileName)
    {


string fileName = "file.txt";
string firstLine = File.ReadLines(fileName).First().Length;
int lines = File.ReadAllLines(fileName).Length;

// See https://aka.ms/new-console-template for more information

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;

class Program
{
    static void Main(string[] args)
    {
        string fileName = "day08_input.txt";
        GetMapSize(fileName);
    }

    static Array GetMapSize(string fileName)
    {
        var MapSize = new int[2];
        var Lines = File.ReadLines(fileName).First();
        Console.WriteLine(Lines);
        MapSize[0] = Lines.Length;
        MapSize[1] = File.ReadAllLines(fileName).Length;
        Console.WriteLine($"columns: {MapSize[0]};rows: {MapSize[1]}");
        return MapSize;
    }
}

public class MapCoordinates
{
    public int XCordinate { get; set; }
    public int YCordinate { get; set; }
    public string XYContent { get; set; }
}

public class Map
{
public MapPlan<jaggedArray>
// Create a class constructor for the Car MapPlan
  public MapPlan(map_input)
  {
    model = "Mustang"; // Set the initial value for model
    var MapSizze<array> = GetMapSize(fileName);
  }
}
    